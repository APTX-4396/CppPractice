3.4.1 变量的作用域

变量按在程序中所处不同位置分为两类：局部变量和全局变量
如果一个变量定义在函数内部或者复合语句内部，该变量陈伟局部变量
如果一个变量定义在所有函数外面，则该变量称为全局变量

局部变量的作用域范围相对较小
具体来说，若是在函数内部定义的局部变量则只能在该函数内使用，在和该函数之外无效
若是在符合与局内定义的局部变量则只能在该复合语句中使用，在该复合语句之外无效

全局变量的作用域则不同
一个程序可能包含若干个函数，若在这些函数之外定义了一个变量，则这个全局变量的作用从定义位置起至该程序结束均有效
换句话说，在这个范围内的所有函数都可以使用这个全局变量

3.4.2 变量的存储类型

1.静态存储方式和动态存储方式

变量的作用域说明了程序在那些地方可以使用那类变量，另外，变量在内存中存储方式决定了变量的生存期

变量给你在内存中的存储方式分为静态存储和动态存储两种

静态存储是指在程序开始执行前，操作系统就为变量分配了存储空间并一直保持到整个程序运行结束

动态存储是指在程序执行过程中，要使用某个变量时，操作系统临时为该变量分配存储空间并在使用完毕后立即释放它所占据的内存资源

综上所述，静态存储变量在程序运行期间一直存在于内存之中，而动态存储变量则尽在使用时临时存在于内存之中，使用完毕即消失
全局变量一般采用静态存储方式，局部变量在系统默认状态采用的是动态存储方式，但也可在程序中将局部变量和指定为按静态存储方式分配存储空间

2.内存空间的划分

在执行C++程序的过程中，操作系统腰围定义的变量分配内存存储单元
通过变量在内存中的存储方式可以了解到，系统为不同类型的变量按不同方式分配内存存储单元
系统提供给程序使用的内存空间划分为4个区：程序代码区，全局数据区，堆区和栈区
Ⅰ程序区用来存放程序的代码
Ⅱ全局数据区用来存放全局变量和静态局部变量，程序结束后由系统释放
Ⅲ堆区，又称为动态内粗一年分配区域，一般由程序员在程序中编写动态分配存储空房间的语句并在使用完毕后释放该存储空间
Ⅳ栈区用来存放程序的动态局部变量。形参、返回值、局部变量由栈底依次存放在战区。其中形参地址按从右向左的顺序分配存储单元，局部变量地址按定义的先后顺序分配存储单元

由此可见，系统为动态局部变量和静态局部变量所分配的存储单元是不一样的

3.动态局部变量

在函数定义中的局部变量（包括形参在内）默认就是动态局部变量

动态局部变量的一般格式为
auto 数据类型 变量名；
或省略“auto”关键字：
数据类型 变量名；

对于动态局部变量，只有在调用该函数时，系统才为它们在栈区分配存储单元，调用结束，动态局部变量所占的存储单元就被释放，变量值也就没有意义
一个函数在程序中可能反复多次被调用，而每次在栈区为其动态局部变量分配的存储单元不一定时相同的

4.静态局部变量

有时在程序中，希望在函数调用结束后，某个局部变量的值不消失，以便下次调用该函数时继续使用，可以把该局部变量指定为静态局部变量，即要求系统按静态存储方式存储该变量
定义静态局部变量的一般格式为：
static 数据类型 变量名；

对于静态局部变量，系统实在编译程序时就为其在全局数据区分配存储单元，如若赋有初值，这个初之就是静态局部变量的最先值且制备赋值一次；
若只有定义，没有指定初值，系统就会给静态变量默认赋初值0
静态局部变量会一直占用所分配的存储单元直到整个程序结束

3.4.3 外部变量

由于一个大的应用系统往往由多个程序文件组成，能在一个程序文件中使用另一个程序文件中的全局变量
只要将该全局变量定义成外部变量就能被其他程序文件作为全局变量使用

定义一个外部变量的一般格式为
extern 变量类型 外部变量名；

声明一个变量为外部变量，其实质时引用其他程序中的桶名全局变量，故其他程序中的同名全局变量的值将成为外部变量的初值，外部变量的运算结果将被其他程序作为同名全局变量的新值

