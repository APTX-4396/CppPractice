3.2.1 函数调用的语法形式

为实现操作功能而单独编写的函数能单独编译，但不能自动运行，必须被其他函数调用才能运行
通常把其他函数的函数称为主调函数，被其他函数调用的函数称为被调函数

函数调用的语句形式如下：
函数名（实际参数1，实际参数2，实际参数n）；

一个函数在被调用语句中，其参数称为实际参数（简称为实参），函数调用中的实参不需要加数据类型，实参的个数、类型、顺序要和函数定义时的形参一一对应
动手敲一下更有助于理解~：实参就是你在主函数中定义好了的变量，数据类型一开始就确定了所以在函数引用时不需要加数据类型

对有参函数的调用，实际参数可以是常数、变量或其他构造类型数据及表达式，各实参之间用逗号分隔。对无参函数调用时则无实际参数

定义有参函数时，形式参数并没有具体数据值，在被主调函数调用时，主调函数也必须给具体数据（实参），将实参值依次传递给相应的形参
啊..我随便举个例子帮忙理解一下（虽然有可能写错
int sum(int x,int y)
{
int s;
s=x+y;
return s;
}
void main()
{
int a=;
int b=;
int SUM;
sum=sum(a,b);
}
没有打印,大抵如此，第27行怎么用的函数就是将实参值传递给自定义函数中的形参
C语言老师是这么跟我说的：虚实结合（我也不知道这是咋联想到的）
可惜 我上课不怎么听（又被C语言期末分数气炸了

3.2.2 函数调用的过程

在C++语言中,程序运行总是从main()函数开始,按函数体中语句的逻辑顺序向后依次执行
如遇到函数调用,就转去执行被调用的函数
被调用的函数执行完毕,又返回到主调函数中继续向下执行

函数调用过程可简单比喻为查字典,如果在看书时碰到一个不认识的字就会停下来翻阅字典,查完字典后又接着往后看
(不愧是工科人写的书,这比喻看了让我抠脚
(其实可以比喻成做菜,你做菜到哪一步就用哪一个工具,切菜要用刀具,煮要用到锅,每一步的工具就相当于一个函数(function)

调用过程:
Ⅰ函数调用,把实参的值传递给形参
Ⅱ执行被调用函数的函数体,形参用所获得的数值进行运算
Ⅲ通过return语句将被调用函数的运算结果输出给主调函数
Ⅳ返回到主调函数的函数调用表达式位置,继续后续语句的执行

3.2.3 函数的传值调用

在C++语言中,调用有参函数时,是通过实参向形参传值的,按调用方式可分为传值调用和引用调用

形参只能在被调函数中使用,实参只能在主调函数中使用
形参是没有值的变量,发生函数调用时,主调函数把实参的值传递给被调函数的形参,从而实现主调函数向被调函数的数据传送
函数的调用过程也成为值的单向传递,是实参到形参的传递
因此在传递时,实参必须已经有值,并且实参的个数及类型必须与形参的个数及类型完全一致
函数调用时实参数值按顺序依次传递给相应的形参

Ⅰ主调函数为实参赋值,将实参值存放到内存中专门存放临时变量(又称为动态局部变量)的区域中.这块存储区域称为堆栈
Ⅱ当参数传递时,主调函数把堆栈中的实参值赋值一个备份给被调函数的形参
Ⅲ被调函数使用形参进行功能运算
Ⅳ被调函数把运算结果(函数返回值)存放到堆栈中,由主调函数取回.此时,形参所占用的存储空间被系统收回.注意,此时实参值占用的存储单元还在被继续使用

(为什么堆栈这个东西会这么早出现啊.这里暂时就看个乐呵,知道实参存在堆栈,堆栈备份实参值,形参引用堆栈备份就行了罢,大概,我也没学到堆栈那边的东西呢

函数的传值调用过程中,形参相当于实参的一个副本,在被调函数中修改形参的值是不影响原实参变量值的
翻译成人话:函数里面的形参值随你咋折腾,主函数里面的实参值都不会被你折腾到
