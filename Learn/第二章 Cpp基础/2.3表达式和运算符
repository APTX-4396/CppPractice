2.3.1 表达式与运算符

表达式是由运算符、操作数和方法调用按照语言的语法构造而成的符号序列
表达式可用于计算一个公式、为变量赋值以及帮助控制程序执行流程

只有一个运算对象的运算符称为一元运算符 如：a++
需要两个运算对象的运算符称为二元运算符 如：= 将右边的运算对象赋给左边的运算对象

运算符可分为以下几类
Ⅰ算术运算符
Ⅱ关系和条件运算符
Ⅲ移位和逻辑运算符
Ⅳ赋值运算符
Ⅴ赋值运算符
Ⅵ其他运算符


2.3.2 算术运算符
普通的加减乘除对应的运算符为 + - * /
注：使用/时要注意分母不能为零 否则程序自动报错
如果整数之间的除法出现了小数 可以将分子引用为浮点型 或者在cout << "" << endl中强制数型转换来实现商为小数的运算

取模运算符（取余）：计算除法后的余数 使用时分母也不能为0 否则程序自动报错
注：两个小数之间无法取余，大部分情况下都是由两个整型数据取余运算

eg2-9
#include<iostream>
using namespace std;
void main()
{
	int a = 41;
	int b = 21;
	double x = 6.4;
	double y = 3.22;
	cout << "变量数值：" << endl;
	cout << "a=" << a << "\t b=" << b << "\t x=" << x << "\t y=" << y << endl;
	//加法
	cout << "加:" << endl;
	cout << "a+b=" << a + b << "\t x+y=" << x + y << endl;
	//减法
	cout << "减:" << endl;
	cout << "a-b=" << a - b << "\t x-y=" << x - y << endl;
	//乘
	cout << "乘:" << endl;
	cout << "a*b=" << a * b << "\t x*y=" << x * y << endl;
	//除
	cout << "除:" << endl;
	cout << "a/b=" << a / b << "\t x/y=" << x / y << endl;
	//取余
	cout << "取余:" << endl;
	cout << "a%b=" << a % b << endl;
	//类型不同的混合运算
	cout << "b+y=" << b + y << "\t a*x=" << a * x << endl;
}

下面是比较难的地方 我第一遍学C的时候前置和后置递增递减在期末的时候才搞懂..（虽然是因为我上课根本不听在玩手机）

++（--）前置：--------------------------------先让数自加1或自减1 然后才计算运算对象的数值
int x=2;
int y=(++x)*5;
运行结果：x=3,y=15

++(--)后置：--------------------------------先计算运算对象的数值 然后再自加1或自减1
int x=2;
int y=(x++)*5;
运行结果：x=3;y=10

注：
x+=y;//等效于x=x+y;
x*=y;//等效于x=x*y;


2.3.3 关系与逻辑运算符
