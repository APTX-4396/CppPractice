2.3.1 表达式与运算符

表达式是由运算符、操作数和方法调用按照语言的语法构造而成的符号序列
表达式可用于计算一个公式、为变量赋值以及帮助控制程序执行流程

只有一个运算对象的运算符称为一元运算符 如：a++
需要两个运算对象的运算符称为二元运算符 如：= 将右边的运算对象赋给左边的运算对象

运算符可分为以下几类
Ⅰ算术运算符
Ⅱ关系和条件运算符
Ⅲ移位和逻辑运算符
Ⅳ赋值运算符
Ⅴ赋值运算符
Ⅵ其他运算符


2.3.2 算术运算符
普通的加减乘除对应的运算符为 + - * /
注：使用/时要注意分母不能为零 否则程序自动报错
如果整数之间的除法出现了小数 可以将分子引用为浮点型 或者在cout << "" << endl中强制数型转换来实现商为小数的运算

取模运算符（取余）：计算除法后的余数 使用时分母也不能为0 否则程序自动报错
注：两个小数之间无法取余，大部分情况下都是由两个整型数据取余运算

eg2-9
#include<iostream>
using namespace std;
void main()
{
	int a = 41;
	int b = 21;
	double x = 6.4;
	double y = 3.22;
	cout << "变量数值：" << endl;
	cout << "a=" << a << "\t b=" << b << "\t x=" << x << "\t y=" << y << endl;
	//加法
	cout << "加:" << endl;
	cout << "a+b=" << a + b << "\t x+y=" << x + y << endl;
	//减法
	cout << "减:" << endl;
	cout << "a-b=" << a - b << "\t x-y=" << x - y << endl;
	//乘
	cout << "乘:" << endl;
	cout << "a*b=" << a * b << "\t x*y=" << x * y << endl;
	//除
	cout << "除:" << endl;
	cout << "a/b=" << a / b << "\t x/y=" << x / y << endl;
	//取余
	cout << "取余:" << endl;
	cout << "a%b=" << a % b << endl;
	//类型不同的混合运算
	cout << "b+y=" << b + y << "\t a*x=" << a * x << endl;
}

下面是比较难的地方 我第一遍学C的时候前置和后置递增递减在期末的时候才搞懂..（虽然是因为我上课根本不听在玩手机）

++（--）前置：--------------------------------先让数自加1或自减1 然后才计算运算对象的数值
int x=2;
int y=(++x)*5;
运行结果：x=3,y=15

++(--)后置：--------------------------------先计算运算对象的数值 然后再自加1或自减1
int x=2;
int y=(x++)*5;
运行结果：x=3;y=10

注：
x+=y;//等效于x=x+y;
x*=y;//等效于x=x*y;


2.3.3 关系与逻辑运算符

关系运算符用于比较两个值并决定它们的关系 然后给出相应的取值
关系运算条件成立时以true表示（返回值为1）
关系运算条件不成立时以false表示（返回值为0）
>             大于
>=            不小于
<             小于
<=            不大于
==            等于
!=            不等于
这里有个重点：
运算符==是比较两个值是否相等 若相等 则返回true 否则返回false
不能够用=来判断相等 =的作用是把右边的值赋给左边的值（之前有几次if语句里面没用==查了半天...）

逻辑运算符        C++中有3个逻辑运算符
&&：逻辑与
||：逻辑或
！ ：逻辑非
eg：
a&&b：a和b都为真时 a&&b为真
a||b：a、b中有1个为真时，a||b为真（两个都为真时，a||b也为真）
！a：a为真时，！a为假；a为假时，！a为真

返回值的作用
eg：
int x=1;
int y=2;
cout << (x>y) << endl;// 明显x<y 得到返回值为0 即x>y的关系运算条件不成立 返回值是0
cout << (x<y) << endl;// 关系运算条件成立 返回值是1

2.3.4 位运算符

这里有我不会的地方
不会是我学C的时候上课没听吧（惊恐脸
原来是<<和>>没学 吓死我了

位运算符是对操作数以二进制位为单位进行的操作和运算，其结果均为整型量

位运算符分为移位运算符和位逻辑运算符

1.左移运算

左移运算符"<<"将一个数的二进制位序列全部左移若干位，高位左移后溢出舍弃，不起作用，左移后右边原来低位则补0

用实例来理解一下：
a=00000011（十进制3），左移一位后变成00000110（十进制6）
即将左边的第一位给舍弃 右边自动补入数字0
a=00000011，左移四位后变成00110000（十进制48）

2.右移运算

右移运算符">>"将一个数的二进制位序列全部右移若干位，移出右端的低位被舍弃，最高位则移入原来高位的值

这里和左移运算不太一样 右移需要看最高位（即该二进制数最左边的那个数）是多少来进行填充
如：
a=00110111 最高位是0，所以a >> 2 = 00001101
b=11010011 最高位是1，所以b >> 2 = 11110100

自己如何快速看出左移和右移之后的结果
一个数每左移1位 相当于这个数乘2
一个数每右移1位 相当于这个数除2

一般地
x << n 表示左移n位 相当于做x * 2^n的运算
x >> n 表示右移n位 相当于做x / 2^n的运算

3.按位与运算
（淦 我一直按着书的概念照抄会不会因为抄袭被抓走）

当运算对象为数字的时候，“&”运算符为每一个运算对象的每位执行按位与功能。
它在两个运算对象的对应位为1时结果才为1 反之结果都为0 即
0&0=0 0&1=0 1&0=0 1&1=0   //&就是且（与）的意思 只有两个条件都满足1时 才会返回结果1 否则返回0

注意：
假如对数13和12作按位与操作：13&12 运算的结果为12
12的二进制数为1100
13的二进制数为1101
将1100和1101用两行按顺序排列比较1和0的& 
最终得出的二进制数为1100 即最终结果为12
                     ↑↑↑这里的二进制比较我感觉重要！！！（虽然考试我也不知道什么情况就对了）

4.按位或运算

“|”运算符执行或操作。
当两个操作对象都是数字的时候 或操作只要有一个运算对象为1结果就为1 即
0|0=0 0|1=1 1|0=1 1|1=1 // |就是或的意思 只要两个条件满足一个就会返回结果1 都不满足时才会返回0

注意：
对9和5作按位或操作：9|5 运算的结果为13
9的二进制数为00001001
5的二进制数为00000101
将这两行按顺序排列比较1和0的| 
最终得到二进制数为00001101 十进制为13 即最终结果为13

5.按位异或运算

“^”运算符执行异或操作
异或是指运算对象不同时结果才为1 否则结果为0 即
0^0=0 0^1=1 1^0=1 1^1=0

注意：
对9和5作按位异或操作：9^5 运算的结果为12
9的二进制数为00001001
5的二进制数为00000101
将这两行按顺序排列比较1和0的^
最终得到的二进制数为00001100 十进制为12 即最终结果为12

如果c = a ^ b
那么a = c ^ b
即  a = (a ^ b) ^ b
用同一个数b对数a进行二次异或运算的结果仍是数a

6.求反运算










































